
package circularqueueimplementation;
import java.util.Scanner;
import java.util.Arrays;

public class CircularQueueImplementation {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int countcircular=0,num_insert;
         System.out.print("Enter how many data you want to stored: ");
         countcircular = sc.nextInt();
        CircularQueue<Integer> circularQueue = new CircularQueue(countcircular);
        
        System.out.println("Enter number to insert: ");
        for(int a=0;a<countcircular;a++){
         num_insert = sc.nextInt();
        circularQueue.enqueue(num_insert);
        }
        boolean condition = true;
        int operation =0;
        do{
        System.out.println("\nEnter Operation you want to user: \n1 - Show circular Queue Data"
                + " \n2 - Dequeue "
                + "\n3 - Enqueue Data"
                + " \n4 - Check if Empty "
                +"\n5 - Push Data "
                + "\n6 - Exit\n");
        System.out.print("Enter your choice: ");
        operation = sc.nextInt();
        switch(operation){
            case 1:  //Show Data
        System.out.println("Full Circular Queue" + circularQueue);
        circularQueue.queueFront();
        circularQueue.queueTail();
        break;
            case 2:  //Dequeue
                
                if(circularQueue.isEmpty()){
                    System.out.println("Circular Data is empty please enqueque first");
                }
                else{
        System.out.print("Dequeued following element from circular Queue ");
        System.out.println(circularQueue.dequeue() + " ");
                }
        break;
            case 3: //Enqueue
                int insert2 = 0;
                if(circularQueue.queuefrontcheck()){
                    
                }
                else{
                System.out.print("Enter number to enqueue: ");
                insert2 = sc.nextInt();
                        
                circularQueue.enqueue(insert2);
                System.out.println("After enqueueing circular queue with element having value "+insert2);
                        }
        break;
            case 4:
                boolean checkdata= circularQueue.isEmpty();
                if(checkdata)
                    System.out.println("Circular Data is Empty");
                    else
                    System.out.println("Circular Data is not Empty");
        break;
            case 5:
                circularQueue.queuepush();
                break;
            case 6:
                condition = false;
                break;
                
        }//switch close
        
        }while(condition); // do close
    }

}

//implementation of Circular Queue using Generics
class CircularQueue<E> {

    private int currentSize; //Current Circular Queue Size
    private E[] circularQueueElements;
    private int maxSize; //Circular Queue maximum size
    private E passdata;
    private int rear;//rear position of Circular queue(new element enqueued at rear).
    private int front; //front position of Circular queue(element will be dequeued from front).      
    public CircularQueue(int maxSize) {
        this.maxSize = maxSize;
        circularQueueElements = (E[]) new Object[this.maxSize];
        currentSize = 0;
        front = -1;
        rear = -1;

    }
    
    /**
     * Enqueue elements to rear.
     */
    public boolean queuefrontcheck(){
        if(circularQueueElements[circularQueueElements.length-1] != null){
            System.out.println("\n Please push first before enqueue \n");
            return true;
        }
        else{
            
            return false;
        }
        
    }
     void queueFront() 
    {
        int countnum=0;
        for(int d=0;d<circularQueueElements.length;d++)
            if(circularQueueElements[d] == null)
                countnum++;
        if (front == rear && countnum ==circularQueueElements.length) { 
            System.out.printf("\nQueue is Empty\n");
            return; 
        }
        System.out.printf("\nFront Element is: %d", circularQueueElements[front]); 
        return; 
    } 
     void queueTail() 
    { 
        int countnum=0;
        for(int d=0;d<circularQueueElements.length;d++)
            if(circularQueueElements[d] == null)
                countnum++;
        if (front == rear && countnum == circularQueueElements.length) { 
            System.out.printf("\nQueue is Empty\n");
            return; 
        }
        System.out.printf("\nTail Element is: %d", circularQueueElements[rear]); 
        return; 
    } 
     void queuepush(){
         if(isFull() || isEmpty()){
             System.out.println("Circular Queue cannot be push");
         }
         else{
             if(circularQueueElements[0] != null){
                 System.out.println("Circular Queue cannot be push");
             }
                 
             else{
                 
             int a;
             for( a=0;a<circularQueueElements.length;a++){
                 
                    if(a==circularQueueElements.length-1){
                        circularQueueElements[a] = null;
                    }
                    else{
                     passdata =   circularQueueElements[a+1];
                     circularQueueElements[a] = circularQueueElements[a+1];
                     circularQueueElements[a+1] =  passdata;
                    }
         }
             System.out.println("\n Queue Pushed \n");
             front -= 1;
             rear -= 1;
     } // else close for queuepush
         }
     }
     
    public void enqueue(E item) throws QueueFullException {
        int checkfull =1;
        int count =0;
        
        if (isFull()) {
            for(int c=0;c<circularQueueElements.length;c++){
            if(circularQueueElements[c] == null)
            {
                count++;
            }
        }
        if(count == circularQueueElements.length-1)
            checkfull=1;
        if(count < 1){
            if(circularQueueElements[circularQueueElements.length] != null){
            System.out.println("Please push first before enqueue");
            }
            
        }
        if(count==1 && circularQueueElements[circularQueueElements.length] == null){

           for(int b=0;b<circularQueueElements.length;b++){
            if(circularQueueElements[b] == null || b !=0){

            circularQueueElements[b] = item;
            currentSize++;
            }
        }
        }
            checkfull =0;
        }
        if(checkfull==1){
        
            rear = (rear + 1) % circularQueueElements.length;
            circularQueueElements[rear] = item;
            currentSize++;
            
            if (front == -1) {
				front = rear;
                               
			}
            
        }
        
        
    }
    /**
     * Dequeue element from Front.
     */
    public E dequeue() throws QueueEmptyException {
        E deQueuedElement;
        if (isEmpty()) {
            throw new QueueEmptyException("Circular Queue is empty. Element cannot be retrieved");
        }
        else {
            deQueuedElement = circularQueueElements[front];
            circularQueueElements[front] = null;
            front = (front + 1) % circularQueueElements.length;
            currentSize--;
        }
        return deQueuedElement;
    }

    /**
     * Check if queue is full.
     */
    public boolean isFull() {
        return (currentSize == circularQueueElements.length);
    }
    
    /**
     * Check if Queue is empty.
     */
    public boolean isEmpty() {
        return (currentSize == 0);
    }

    @Override
    public String toString() {
        return "CircularQueue [" + Arrays.toString(circularQueueElements) + "]";
    }

}

class QueueFullException extends RuntimeException {

    private static final long serialVersionUID = 1L;

    public QueueFullException() {
        super();
    }

    public QueueFullException(String message) {
        super(message);
    }

}

class QueueEmptyException extends RuntimeException {

    private static final long serialVersionUID = 1L;

    public QueueEmptyException() {
        super();
    }

    public QueueEmptyException(String message) {
        super(message);
    }

}